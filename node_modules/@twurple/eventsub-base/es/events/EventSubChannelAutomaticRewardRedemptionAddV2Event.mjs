import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { checkRelationAssertion, DataObject, rawDataSymbol, rtfm } from '@twurple/common';
import { EventSubChannelAutomaticReward } from "./common/EventSubChannelAutomaticReward.mjs";
/**
 * An EventSub event representing an automatic reward being redeemed by a user in a channel.
 */
let EventSubChannelAutomaticRewardRedemptionAddV2Event = class EventSubChannelAutomaticRewardRedemptionAddV2Event extends DataObject {
    /** @internal */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the redemption.
     */
    get id() {
        return this[rawDataSymbol].id;
    }
    /**
     * The ID of the broadcaster in whose channel the reward was redeemed.
     */
    get broadcasterId() {
        return this[rawDataSymbol].broadcaster_user_id;
    }
    /**
     * The name of the broadcaster in whose channel the reward was redeemed.
     */
    get broadcasterName() {
        return this[rawDataSymbol].broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster in whose channel the reward was redeemed.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].broadcaster_user_name;
    }
    /**
     * Gets more information about the broadcaster.
     */
    async getBroadcaster() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].broadcaster_user_id));
    }
    /**
     * The ID of the redeeming user.
     */
    get userId() {
        return this[rawDataSymbol].user_id;
    }
    /**
     * The name of the redeeming user.
     */
    get userName() {
        return this[rawDataSymbol].user_login;
    }
    /**
     * The display name of the redeeming user.
     */
    get userDisplayName() {
        return this[rawDataSymbol].user_name;
    }
    /**
     * Gets more information about the redeeming user.
     */
    async getUser() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].user_id));
    }
    /**
     * An object that contains the reward information.
     */
    get reward() {
        return new EventSubChannelAutomaticReward(this[rawDataSymbol].reward);
    }
    /**
     * The text of the message, or `null` if there is no message.
     */
    get messageText() {
        var _a, _b;
        return (_b = (_a = this[rawDataSymbol].message) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : null;
    }
    /**
     * The pre-parsed message parts.
     */
    get messageParts() {
        var _a, _b;
        return (_b = (_a = this[rawDataSymbol].message) === null || _a === void 0 ? void 0 : _a.fragments) !== null && _b !== void 0 ? _b : [];
    }
    /**
     * The date when the user redeemed the reward.
     */
    get redemptionDate() {
        return new Date(this[rawDataSymbol].redeemed_at);
    }
};
__decorate([
    Enumerable(false)
], EventSubChannelAutomaticRewardRedemptionAddV2Event.prototype, "_client", void 0);
EventSubChannelAutomaticRewardRedemptionAddV2Event = __decorate([
    rtfm('eventsub-base', 'EventSubChannelAutomaticRewardRedemptionAddV2Event', 'id')
], EventSubChannelAutomaticRewardRedemptionAddV2Event);
export { EventSubChannelAutomaticRewardRedemptionAddV2Event };
