"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelBitsUseEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
const EventSubChannelBitsUsePowerUp_1 = require("./common/EventSubChannelBitsUsePowerUp");
/**
 * An EventSub event representing bits being used in a channel.
 */
let EventSubChannelBitsUseEvent = class EventSubChannelBitsUseEvent extends common_1.DataObject {
    /** @internal */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the broadcaster in whose channel the bits were used.
     */
    get broadcasterId() {
        return this[common_1.rawDataSymbol].broadcaster_user_id;
    }
    /**
     * The name of the broadcaster in whose channel the bits were used.
     */
    get broadcasterName() {
        return this[common_1.rawDataSymbol].broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster in whose channel the bits were used.
     */
    get broadcasterDisplayName() {
        return this[common_1.rawDataSymbol].broadcaster_user_name;
    }
    /**
     * Gets more information about the broadcaster.
     */
    async getBroadcaster() {
        return (0, common_1.checkRelationAssertion)(await this._client.users.getUserById(this[common_1.rawDataSymbol].broadcaster_user_id));
    }
    /**
     * The ID of the user who has used bits.
     */
    get userId() {
        return this[common_1.rawDataSymbol].user_id;
    }
    /**
     * The name of the user who has used bits.
     */
    get userName() {
        return this[common_1.rawDataSymbol].user_login;
    }
    /**
     * The display name of the user who has used bits.
     */
    get userDisplayName() {
        return this[common_1.rawDataSymbol].user_name;
    }
    /**
     * Gets more information about the user.
     */
    async getUser() {
        return (0, common_1.checkRelationAssertion)(await this._client.users.getUserById(this[common_1.rawDataSymbol].user_id));
    }
    /**
     * The type of the bits usage.
     */
    get type() {
        return this[common_1.rawDataSymbol].type;
    }
    /**
     * The number of bits used.
     */
    get bits() {
        return this[common_1.rawDataSymbol].bits;
    }
    /**
     * The chat message in plain text, or `null` if it's not applicable.
     */
    get messageText() {
        var _a, _b;
        return (_b = (_a = this[common_1.rawDataSymbol].message) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : null;
    }
    /**
     * Ordered list of chat message fragments, or `null` if it's not applicable.
     */
    get messageParts() {
        var _a, _b;
        return (_b = (_a = this[common_1.rawDataSymbol].message) === null || _a === void 0 ? void 0 : _a.fragments) !== null && _b !== void 0 ? _b : null;
    }
    /**
     * The Power-up data, or `null` if it's not applicable.
     */
    get powerUp() {
        return (0, shared_utils_1.mapNullable)(this[common_1.rawDataSymbol].power_up, v => new EventSubChannelBitsUsePowerUp_1.EventSubChannelBitsUsePowerUp(v));
    }
};
exports.EventSubChannelBitsUseEvent = EventSubChannelBitsUseEvent;
tslib_1.__decorate([
    (0, shared_utils_1.Enumerable)(false)
], EventSubChannelBitsUseEvent.prototype, "_client", void 0);
exports.EventSubChannelBitsUseEvent = EventSubChannelBitsUseEvent = tslib_1.__decorate([
    (0, common_1.rtfm)('eventsub-base', 'EventSubChannelBitsUserEvent', 'userId')
], EventSubChannelBitsUseEvent);
